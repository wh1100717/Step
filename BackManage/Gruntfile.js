// Generated by CoffeeScript 1.7.1
'use strict';
module.exports = function(grunt) {
  require('load-grunt-tasks')(grunt);
  require('time-grunt')(grunt);
  grunt.initConfig({
    BackManage: {
      app: 'app',
      dist: 'dist'
    },
    express: {
      options: {
        port: process.env.PORT || 80
      },
      dev: {
        options: {
          script: 'server.js',
          debug: true
        }
      },
      prod: {
        options: {
          script: 'dist/server.js',
          node_env: 'production'
        }
      }
    },
    open: {
      server: {
        url: 'http://localhost:<%= express.options.port %>'
      }
    },
    watch: {
      js: {
        files: ['<%= BackManage.app %>/scripts/**/*.js'],
        tasks: ['newer:jshint:all'],
        options: {
          livereload: true
        }
      },
      styles: {
        files: ['<%= BackManage.app %>/styles/**/*.css'],
        tasks: ['newer:copy:styles', 'autoprefixer']
      },
      gruntfile: {
        files: ['Gruntfile.js']
      },
      livereload: {
        files: ['<%= BackManage.app %>/views/{,*#*}*.{html,jade}', '{.tmp,<%= BackManage.app %>}/styles/{,*#*}*.css', '{.tmp,<%= BackManage.app %>}/scripts/{,*#*}*.js', '<%= BackManage.app %>/images/{,*#*}*.{png,jpg,jpeg,gif,webp,svg}'],
        options: {
          livereload: true
        }
      },
      express: {
        files: ['server.js', 'lib/**/*.{js,json}'],
        tasks: ['newer:jshint:server', 'express:dev', 'wait'],
        options: {
          livereload: true,
          nospawn: true
        }
      }
    },
    jshint: {
      options: {
        jshintrc: '.jshintrc',
        reporter: require('jshint-stylish')
      },
      server: {
        options: {
          jshintrc: 'lib/.jshintrc'
        },
        src: ['lib/**/*.js']
      },
      all: []
    },
    clean: {
      dist: {
        files: [
          {
            dot: true,
            src: ['.tmp', '<%= BackManage.dist %>/*', '!<%= BackManage.dist %>/.git*', '!<%= BackManage.dist %>/Procfile']
          }
        ]
      },
      server: '.tmp'
    },
    autoprefixer: {
      options: {
        browsers: ['last 1 version']
      },
      dist: {
        files: [
          {
            expand: true,
            cwd: '.tmp/styles/',
            src: '**/*.css',
            dest: '.tmp/styles/'
          }
        ]
      }
    },
    'node-inspector': {
      custom: {
        options: {
          'web-host': 'localhost'
        }
      }
    },
    nodemon: {
      debug: {
        script: 'server.js',
        options: {
          nodeArgs: ['--debug-brk'],
          env: {
            PORT: process.env.PORT || 80
          },
          callback: function(nodemon) {
            nodemon.on('log', function(event) {
              return console.log(event.colour);
            });
            return nodemon.on('config:update', function() {
              return setTimeout(function() {
                return require('open')('http:#localhost:8080/debug?port=5858');
              }, 500);
            });
          }
        }
      }
    },
    'bower-install': {
      app: {
        html: '<%= BackManage.app %>/views/index.html',
        ignorePath: '<%= BackManage.app %>/'
      }
    },
    rev: {
      dist: {
        files: {
          src: ['<%= BackManage.dist %>/public/scripts/**/*.js', '<%= BackManage.dist %>/public/styles/**/*.css', '<%= BackManage.dist %>/public/images/**/*.{png,jpg,jpeg,gif,webp,svg}', '<%= BackManage.dist %>/public/styles/fonts/*']
        }
      }
    },
    useminPrepare: {
      html: ['<%= BackManage.app %>/views/index.html', '<%= BackManage.app %>/views/index.jade'],
      options: {
        dest: '<%= BackManage.dist %>/public'
      }
    },
    usemin: {
      html: ['<%= BackManage.dist %>/views/**/*.html', '<%= BackManage.dist %>/views/**/*.jade'],
      css: ['<%= BackManage.dist %>/public/styles/**/*.css'],
      options: {
        assetsDirs: ['<%= BackManage.dist %>/public']
      }
    },
    imagemin: {
      options: {
        cache: false
      },
      dist: {
        files: [
          {
            expand: true,
            cwd: '<%= BackManage.app %>/images',
            src: '**/*.{png,jpg,jpeg,gif}',
            dest: '<%= BackManage.dist %>/public/images'
          }
        ]
      }
    },
    svgmin: {
      dist: {
        files: [
          {
            expand: true,
            cwd: '<%= BackManage.app %>/images',
            src: '**/*.svg',
            dest: '<%= BackManage.dist %>/public/images'
          }
        ]
      }
    },
    htmlmin: {
      dist: {
        options: {},
        files: [
          {
            expand: true,
            cwd: '<%= BackManage.app %>/views',
            src: ['*.html', 'partials/**/*.html'],
            dest: '<%= BackManage.dist %>/views'
          }
        ]
      }
    },
    ngmin: {
      dist: {
        files: [
          {
            expand: true,
            cwd: '.tmp/concat/scripts',
            src: '*.js',
            dest: '.tmp/concat/scripts'
          }
        ]
      }
    },
    copy: {
      dist: {
        files: [
          {
            expand: true,
            dot: true,
            cwd: '<%= BackManage.app %>',
            dest: '<%= BackManage.dist %>/public',
            src: ['*.{ico,png,txt}', '.htaccess', 'bower_components/**/*', 'images/**/*.{webp}', 'fonts/**/*']
          }, {
            expand: true,
            dot: true,
            cwd: '<%= BackManage.app %>/views',
            dest: '<%= BackManage.dist %>/views',
            src: '**/*.jade'
          }, {
            expand: true,
            cwd: '.tmp/images',
            dest: '<%= BackManage.dist %>/public/images',
            src: ['generated/*']
          }, {
            expand: true,
            dest: '<%= BackManage.dist %>',
            src: ['package.json', 'server.js', 'lib/**/*']
          }
        ]
      },
      styles: {
        expand: true,
        cwd: '<%= BackManage.app %>/styles',
        dest: '.tmp/styles/',
        src: '**/*.css'
      }
    },
    concurrent: {
      server: ['copy:styles'],
      test: ['copy:styles'],
      debug: {
        tasks: ['nodemon', 'node-inspector'],
        options: {
          logConcurrentOutput: true
        }
      },
      dist: ['copy:styles', 'imagemin', 'svgmin', 'htmlmin']
    }
  });
  grunt.registerTask('wait', function() {
    var done;
    grunt.log.ok('Waiting for server reload...');
    done = this.async();
    return setTimeout(function() {
      return grunt.log.writeln('Done waiting!');
    }, 500);
  });
  grunt.registerTask('express-keepalive', 'Keep grunt running', function() {
    return this.async();
  });
  grunt.registerTask('serve', function(target) {
    if (target === 'dist') {
      return grunt.task.run(['build', 'express:prod', 'open', 'express-keepalive']);
    }
    if (target === 'debug') {
      return grunt.task.run(['clean:server', 'bower-install', 'concurrent:server', 'autoprefixer', 'concurrent:debug']);
    }
    return grunt.task.run(['clean:server', 'bower-install', 'concurrent:server', 'autoprefixer', 'express:dev', 'open', 'watch']);
  });
  grunt.registerTask('server', function() {
    return grunt.task.run(['serve']);
  });
  grunt.registerTask('build', ['clean:dist', 'bower-install', 'useminPrepare', 'concurrent:dist', 'autoprefixer', 'concat', 'ngmin', 'copy:dist', 'cssmin', 'uglify', 'rev', 'usemin']);
  return grunt.registerTask('default', ['newer:jshint', 'build']);
};
